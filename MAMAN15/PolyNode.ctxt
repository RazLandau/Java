#BlueJ class context
comment0.params=power\ coefficient
comment0.target=PolyNode(int,\ double)
comment0.text=\r\n\ Constructor\ for\ a\ PolyNode\r\n\ Constructs\ a\ new\ PolyNode\ with\ given\ power\ and\ coefficient,\ and\ sets\ next\ indicator\ to\ null.\r\n\ If\ given\ power\ is\ negative,\ sets\ both\ power\ and\ coefficient\ to\ 0.\r\n\ Both\ the\ runtime\ and\ the\ memory\ complexity\ of\ this\ methods\ is\ O(1).\r\n\ @param\ power\r\n\ @param\ coefficient\r\n
comment1.params=power\ coefficient\ next
comment1.target=PolyNode(int,\ double,\ PolyNode)
comment1.text=\r\n\ Constructor\ for\ a\ PolyNode\r\n\ Constructs\ a\ new\ PolyNode\ with\ given\ power,\ coefficient\ and\ next\ indicator.\r\n\ Both\ the\ runtime\ and\ the\ memory\ complexity\ of\ this\ methods\ is\ O(1).\r\n\ @param\ power\r\n\ @param\ coefficient\r\n\ @param\ next\ the\ PolyNode\ this\ PolyNode\ is\ linked\ to\r\n
comment2.params=p
comment2.target=PolyNode(PolyNode)
comment2.text=\r\n\ Copy\ constructor\ for\ PolyNode\r\n\ Constructs\ a\ new\ PolyNode\ with\ the\ same\ attributes\ as\ another\ PolyNode\r\n\ Both\ the\ runtime\ and\ the\ memory\ complexity\ of\ this\ methods\ is\ O(1).\r\n\ @param\ p\ the\ copied\ PolyNode\r\n
comment3.params=
comment3.target=int\ getPower()
comment3.text=\r\n\ Returns\ the\ power\ of\ the\ PolyNode\r\n\ Both\ the\ runtime\ and\ the\ memory\ complexity\ of\ this\ methods\ is\ O(1).\r\n\ @return\ the\ power\ of\ this\ PolyNode\r\n
comment4.params=
comment4.target=double\ getCoefficient()
comment4.text=\r\n\ Returns\ the\ coefficient\ of\ the\ PolyNode\r\n\ Both\ the\ runtime\ and\ the\ memory\ complexity\ of\ this\ methods\ is\ O(1).\r\n\ @return\ the\ coefficient\ of\ this\ PolyNode\r\n
comment5.params=
comment5.target=PolyNode\ getNext()
comment5.text=\r\n\ Returns\ the\ PolyNode\ the\ PolyNode\ is\ linked\ to\r\n\ Both\ the\ runtime\ and\ the\ memory\ complexity\ of\ this\ methods\ is\ O(1).\r\n\ @return\ the\ PolyNode\ this\ PolyNode\ is\ linked\ to\r\n
comment6.params=power
comment6.target=void\ setPower(int)
comment6.text=\r\n\ Changes\ the\ power\ of\ the\ PolyNode\r\n\ If\ given\ power\ is\ negative,\ sets\ both\ power\ and\ coefficient\ to\ 0.\r\n\ Both\ the\ runtime\ and\ the\ memory\ complexity\ of\ this\ methods\ is\ O(1).\r\n\ @param\ power\ the\ new\ power\r\n
comment7.params=coefficient
comment7.target=void\ setCoefficient(double)
comment7.text=\r\n\ Changes\ the\ coefficient\ of\ the\ PolyNode\r\n\ Both\ the\ runtime\ and\ the\ memory\ complexity\ of\ this\ methods\ is\ O(1).\r\n\ @param\ coefficient\ the\ new\ coefficient\r\n
comment8.params=next
comment8.target=void\ setNext(PolyNode)
comment8.text=\r\n\ Changes\ the\ next\ indicator\ of\ the\ PolyNode\r\n\ Both\ the\ runtime\ and\ the\ memory\ complexity\ of\ this\ methods\ is\ O(1).\r\n\ @param\ next\ the\ new\ next\ indicator\r\n
comment9.params=
comment9.target=java.lang.String\ toString()
comment9.text=\r\n\ Returns\ a\ string\ representation\ of\ the\ PolyNode\r\n\ Both\ the\ runtime\ and\ the\ memory\ complexity\ of\ this\ methods\ is\ O(1).\r\n\ @return\ String\ representation\ of\ this\ PolyNode\r\n
numComments=10
